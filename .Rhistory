library(picaplot)
install_github("jinhyunju/picaplot")
devtools::install_github("jinhyunju/picaplot")
install.packages('ggplot2')
plot(rnorm(100),rnorm(100))
dev.off()
install_github("jinhyunju/picaplot")
devtools::install_github("jinhyunju/picaplot")
install.packages('knitr')
devtools::install_github("jinhyunju/picaplot")
install.packages('rmarkdown')
devtools::install_github("jinhyunju/picaplot")
getwd()
setwd("~/testspace/")
dir()
library(rhdf5)
install.packages('rhdf5')
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
pkgs = c("Rcpp", "RcppGSL", "RcppProgress", "MASS", "formula.tools",
"BH", "doParallel", "bigmemory", "bigmemory.sri", "aod")
install.packages(pkgs)
library(lrgpr)
library(lrgpr)
expr_data = h5read("Smith08GLU.h5", "phenotypes/matrix")
library(rhdf5)
expr_data = h5read("Smith08GLU.h5", "phenotypes/matrix")
dim(expr_data)
colnames(expr_data) = h5read("Smith08GLU.h5", "phenotypes/col_info/id")
head(colname(expr_data))
head(colnames(expr_data))
rownames(expr_data) = h5read("Smith08GLU.h5", "phenotypes/row_info/id")
library(picaplot)
test = run_ica(pheno_mx = expr_data)
test = run_ica(pheno_mx = expr_data, k_est = 108)
test = run_ica(pheno_mx = expr_data, k_est = 82)
test = run_ica(pheno_mx = expr_data, k_est = 70)
test = run_ica(pheno_mx = expr_data, k_est = 50)
test = run_ica(pheno_mx = expr_data, k_est = 2)
test = run_ica(pheno_mx = expr_data, k_est = 10)
test = run_ica(pheno_mx = expr_data, k_est = 40)
test = run_ica(pheno_mx = expr_data, k_est = 50)
geno_mx = h5read("Smith08GLU.h5", "genotypes/matrix")
colnames(geno_mx) = h5read("Smith08GLU.h5", "genotypes/col_info/id")
rownames(geno_mx) = h5read("Smith08GLU.h5", "genotypes/row_info/id")
ica_genotype_test <- function(ica_object, genotype_mx, n_cores = 1, sig_threshold = 0.05){
ic_coefficients <- t(ica_object$A)
pval_mx <- glmApply(ic_coefficients ~ SNP,
features = genotype_mx,
nthreads = n_cores)$pValues
colnames(pval_mx) <- rownames(ica_object$A)
sig <- which(pval_mx < (sig_threshold/length(pval_mx) ), arr.ind = TRUE)
genetic_factors <- colnames(pval_mx)[unique(sig[,"col"])]
non_genetic <- colnames(pval_mx)[which(!(colnames(pval_mx) %in% genetic_factors))]
return(list("genetic" = genetic_factors, "hf" = non_genetic))
}
ass_test = ica_genotype_test(test, geno_mx, n.cores = 1)
ass_test = ica_genotype_test(test, geno_mx)
library(lrgpr)
ass_test = ica_genotype_test(test, geno_mx)
test$A
t(test$A)
test = run_ica(pheno_mx = t(expr_data), k_est = 50)
test = run_ica(pheno_mx = t(expr_data), k_est = 108)
ass_test = ica_genotype_test(test, geno_mx)
ass_test[["hf"]]
ass_test[["genetic"]]
ica_genotype_test <- function(ica_object, genotype_mx, n_cores = 1, sig_threshold = 0.05, return_pval = FALSE){
ic_coefficients <- t(ica_object$A)
pval_mx <- glmApply(ic_coefficients ~ SNP,
features = genotype_mx,
nthreads = n_cores)$pValues
colnames(pval_mx) <- rownames(ica_object$A)
sig <- which(pval_mx < (sig_threshold/length(pval_mx) ), arr.ind = TRUE)
genetic_factors <- colnames(pval_mx)[unique(sig[,"col"])]
non_genetic <- colnames(pval_mx)[which(!(colnames(pval_mx) %in% genetic_factors))]
if(return_pval){
ica_object$geno_pval = pval_mx
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
} else {
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
}
}
test = ica_genotype_test(test, geno_mx)
test$genetic_factors
test$confounding_factors
test = ica_genotype_test(test, geno_mx, return_pval = TRUE)
dim(test$geno_pval)
get_similarity_mx <- function(ica_object){
cf_idx = ica_object$confounding_factors
message(length(cf_idx), " out of ", nrow(ica_object$A), " ICs used as confounding factors \n")
if(n.covars == 0){
stop("No ICs estimated as hidden factors")
}
non_genetic_factors <- match(ica_object$confounding_factors, colnames(ica_object$S))
y_star <- ica_object$S[,non_genetic_factors] %*% ica_object$A[non_genetic_factors,]
K_mx <- cov(y_star)
return(K_mx)
}
test_k = get_similarity_mx(ica_object)
test_k = get_similarity_mx(test)
get_similarity_mx <- function(ica_object){
cf_idx = ica_object$confounding_factors
message(length(cf_idx), " out of ", nrow(ica_object$A), " ICs used as confounding factors \n")
if(length(cf_idx) == 0){
stop("No ICs estimated as hidden factors")
}
non_genetic_factors <- match(ica_object$confounding_factors, colnames(ica_object$S))
y_star <- ica_object$S[,non_genetic_factors] %*% ica_object$A[non_genetic_factors,]
K_mx <- cov(y_star)
return(K_mx)
}
test_k = get_similarity_mx(test)
test_k
dim(test_k)
library(confeti)
#' Function that uses lrgpr's glmApply to test associations between IC coefficients and genotypes.
#'
#' Testing associations between IC coefficients and genotypes.
#'
#' @param ica_object ICA object that is created with the `run_ica()` function from the `picaplot` package.
#' @param genotype_mx Input genotype matrix with N samples x G genotypes.
#' @param n_cores Number of cores to use for this process.
#' @param sig_threshold Bonferroni significance threshold to use in calling significant p-values.
#' @param return_pval TRUE or FALSE value indicating whether the calculated p-value matrix should be returned.
#' @return ICA object with confounding factor information added.
#' @keywords keywords
#'
#' @import lrgpr
#' @import formula.tools
#' @export
ica_genotype_test <- function(ica_object, genotype_mx, n_cores = 1, sig_threshold = 0.05, return_pval = FALSE){
ic_coefficients <- t(ica_object$A)
pval_mx <- glmApply(ic_coefficients ~ SNP,
features = genotype_mx,
nthreads = n_cores)$pValues
colnames(pval_mx) <- rownames(ica_object$A)
sig <- which(pval_mx < (sig_threshold/length(pval_mx) ), arr.ind = TRUE)
genetic_factors <- colnames(pval_mx)[unique(sig[,"col"])]
non_genetic <- colnames(pval_mx)[which(!(colnames(pval_mx) %in% genetic_factors))]
if(return_pval){
ica_object$geno_pval = pval_mx
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
} else {
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
}
}
#' Function to calculate the covariance structure (K) matrix.
#'
#' Creating the K matrix based on non-genetic independent components.
#'
#' @param ica_object ICA object that contains the confounding factor labels generated with `ica_genotype_test`.
#' @return N x N covariance structure matrix.
#' @keywords keywords
#'
#' @export
get_similarity_mx <- function(ica_object){
cf_idx = ica_object$confounding_factors
message(length(cf_idx), " out of ", nrow(ica_object$A), " ICs used as confounding factors \n")
if(length(cf_idx) == 0){
stop("No ICs estimated as hidden factors")
}
non_genetic_factors <- match(ica_object$confounding_factors, colnames(ica_object$S))
library(confeti)
library(picaplot)
load("~/ica_visualization/GTExSkinLeg_picaplot.RData")
setwd("~/ica_visualization/")
reportgen(ica_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
reportgen(pca_object, geneinfo_df = gene_info, prefix ="GTExSkinLegPCA")
load("~/ica_visualization/GTExSkinLeg_IC_plots.RData")
reportgen(ica_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
load("~/ica_visualization/GTExSkinLeg_IC_plots.RData")
reportgen(ica_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
reportgen(pca_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
library(devtools)
install_github("jinhyunju/picaplot")
library(picaplot)
plot_component(ica_object, comp_idx = 190, geneinfo_df = gene_info)
test =plot_component(ica_object, comp_idx = 190, geneinfo_df = gene_info)
ica_object$covars
ica_object$covars[,1]
class(ica_object$covars[,1])
ica_object$covars[,1] = as.factor(ica_object$covars[,1])
test =plot_component(ica_object, comp_idx = 190, geneinfo_df = gene_info)
ica_object$covars
reportgen(ica_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
reportgen(pca_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
pca_object$covars
pca_object$covars[,1] <- as.factor(pca_object$covars[,1])
reportgen(pca_object, geneinfo_df = gene_info, prefix ="GTExSkinLeg")
getwd()
setwd("~/Dropbox/R_packages/confeti")
library(rhdf5)
h5file = "~/testspace/Smith08EOH.h5"
expr_data = h5read(h5file, "phenotypes/matrix")
dim(expr_data)
colnames(expr_data) = h5read(h5file, "phenotypes/col_info/id")
rownames(expr_data) = h5read(h5file, "phenotypes/row_info/id")
snp_data = h5read(h5file, "genotypes/matrix")
colnames(snp_data) = h5read(h5file, "genotypes/col_info/id")
rownames(snp_data) = h5read(h5file, "genotypes/row_info/id")
expr_data = t(expr_data)
snp_data = t(snp_data)
save(expr_data, snp_data, file = "~/testspace/Smith08EOH.RData")
confeti <- function(expr_data, snp_data, cores = 1, threshold = 0.05, return_pval = FALSE){
ica_object = run_ica(expr_data)
ica_object = ica_genotype_test(ica_object = ica_object,
genotype_mx = t(snp_data),
n_cores = cores,
sig_threshold = threshold,
return_pval = return_pval)
K_mx = get_similarity_mx(ica_object)
return(K_mx)
}
test = confeti(expr_data, snp_data)
ica_genotype_test <- function(ica_object, genotype_mx, n_cores = 1, sig_threshold = 0.05, return_pval = FALSE){
ic_coefficients <- t(ica_object$A)
pval_mx <- glmApply(ic_coefficients ~ SNP,
features = genotype_mx,
nthreads = n_cores)$pValues
colnames(pval_mx) <- rownames(ica_object$A)
sig <- which(pval_mx < (sig_threshold/length(pval_mx) ), arr.ind = TRUE)
genetic_factors <- colnames(pval_mx)[unique(sig[,"col"])]
non_genetic <- colnames(pval_mx)[which(!(colnames(pval_mx) %in% genetic_factors))]
if(return_pval){
ica_object$geno_pval = pval_mx
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
} else {
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
}
}
get_similarity_mx <- function(ica_object){
cf_idx = ica_object$confounding_factors
message(length(cf_idx), " out of ", nrow(ica_object$A), " ICs used as confounding factors \n")
if(length(cf_idx) == 0){
stop("No ICs estimated as hidden factors")
}
non_genetic_factors <- match(ica_object$confounding_factors, colnames(ica_object$S))
y_star <- ica_object$S[,non_genetic_factors] %*% ica_object$A[non_genetic_factors,]
K_mx <- cov(y_star)
return(K_mx)
}
test = confeti(expr_data, snp_data)
library(lrgpr)
test = confeti(expr_data, snp_data)
test(
test
dim(test)
tmx = matrix(c(1:6), ncol = 2)
cov(tmx)
get_similarity_mx <- function(ica_object){
cf_idx = ica_object$confounding_factors
message(length(cf_idx), " out of ", nrow(ica_object$A), " ICs used as confounding factors \n")
if(length(cf_idx) == 0){
stop("No ICs estimated as hidden factors")
}
non_genetic_factors <- match(ica_object$confounding_factors, colnames(ica_object$S))
y_star <- ica_object$S[,non_genetic_factors] %*% ica_object$A[non_genetic_factors,]
K_mx <- cov(y_star)
return(list("Kmx" = K_mx, "y_star" = y_star))
}
ica_genotype_test <- function(ica_object, genotype_mx, n_cores = 1, sig_threshold = 0.05, return_pval = FALSE){
ic_coefficients <- t(ica_object$A)
pval_mx <- glmApply(ic_coefficients ~ SNP,
features = genotype_mx,
nthreads = n_cores)$pValues
colnames(pval_mx) <- rownames(ica_object$A)
sig <- which(pval_mx < (sig_threshold/length(pval_mx) ), arr.ind = TRUE)
genetic_factors <- colnames(pval_mx)[unique(sig[,"col"])]
non_genetic <- colnames(pval_mx)[which(!(colnames(pval_mx) %in% genetic_factors))]
if(return_pval){
ica_object$geno_pval = pval_mx
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
} else {
ica_object$genetic_factors = genetic_factors
ica_object$confounding_factors = non_genetic
return(ica_object)
}
}
confeti <- function(expr_data, snp_data, cores = 1, threshold = 0.05, return_pval = FALSE){
ica_object = run_ica(expr_data)
ica_object = ica_genotype_test(ica_object = ica_object,
genotype_mx = t(snp_data),
n_cores = cores,
sig_threshold = threshold,
return_pval = return_pval)
ica_object$confeti = get_similarity_mx(ica_object)
return(ica_object)
}
test = confeti(expr_data, snp_data)
test$confeti
str(test$confeti)
names(test)
confeti <- function(expr_data, snp_data, return_all = TRUE,
cores = 1,
k = NULL, var_cutoff = 95,
ica_runs = 1, scale_pheno = FALSE,
h_clust_cutoff = 0.3,
similarity_measure = "peaks",
threshold = 0.05,
return_pval = FALSE){
ica_object = run_ica(pheno_mx = expr_data,
k_est = k,
var_cutoff = var_cutoff,
n_runs = ica_runs,
n_cores = cores,
scale_pheno = scale_pheno,
h_clust_cutoff = h_clust_cutoff,
similarity_measure = similarity_measure)
ica_object = ica_genotype_test(ica_object = ica_object,
genotype_mx = t(snp_data),
n_cores = cores,
sig_threshold = threshold,
return_pval = return_pval)
confeti_results = get_similarity_mx(ica_object)
if(return_all){
ica_object$confeti = confeti_results
return(ica_object)
} else {
return(confeti_results)
}
}
test = confeti(expr_data, snp_data, k = 20, return_all = FALSE)
test(
test
str(test)
y_test = test$y_star
y_norm = apply(y_test, 1, function(x) (x- mean(x)) / sd(x))
dim(y_norm)
devtools::document()
library(confeti)
library(confeti)
library(confeti)
load("~/testspace/Smith08EOH.RData")
dim(expr_data)
dim(snp_data)
test = confeti(expr_data, snp_data)
names(test)
str(test$confeti)
